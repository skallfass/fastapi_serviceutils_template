site_name: "{{cookiecutter.service_name}}"

# This tells pydocmd which pages to generate from which Python modules,
# functions and classes. At the first level is the page name, below that
# is a tree of Python member names (modules, classes, etc.) that should be
# documented. Higher indentation leads to smaller header size.
generate:
- app.md:
    - app++
- app_main.md:
    - app.main++
- app_endpoints.md:
    - app.endpoints++
- app_endpoints_v1.md:
    - app.endpoints.v1++
- app_endpoints_v1_errors.md:
    - app.endpoints.v1.errors++
- app_endpoints_v1_models.md:
    - app.endpoints.v1.models++
- app_endpoints_v1_{{cookiecutter.endpoint}}.md:
    - app.endpoints.v1.{{cookiecutter.endpoint}}++

# MkDocs pages configuration. The `<<` operator is sugar added by pydocmd
# that allows you to use an external Markdown file (eg. your project's README)
# in the documentation. The path must be relative to current working directory.
# This configuration is not mandatory if you have your own mkdocs.yml config file.
pages:
- Overview: docs/source/index.md << README.md
- Subject-specific documentation: subject_specific_documentation.md
- Source-Code Documentation:
    - app:
        - __init__: app.md
        - main: app_main.md
        - endpoints:
            - __init__: app_endpoints.md
            - v1:
                - __init__: app_endpoints_v1.md
                - models: app_endpoints_v1_models.md
                - errors: app_endpoints_v1_errors.md
                - {{cookiecutter.endpoint}}: app_endpoints_v1_{{cookiecutter.endpoint}}.md
- Development:
    - Getting started: development/getting_started.md
    - Clean code: development/clean_code.md
    - Dependency management: development/dependency_management.md
    - Git-workflow: development/git_workflow.md
    - Configuration: configuration.md
    - Documentation: development/documentation.md
    - Testing: development/testing.md
    - Endpoints:
        - Endpoint: development/endpoint_structure.md
        - Model-definition: development/endpoint_models.md
        - Versioning of endpoints: development/versioning.md
    - Helpers during development:
        - Makefile: development/helpers/makefile.md
        - Tmuxp: development/helpers/tmuxp.md
        - Pre-commit: development/helpers/pre-commit.md
    - Running service: development/running_service.md
    - Recommended additional resources: recommended.md
- Deployment: deployment.md
- References of used tools and packages: references.md

# These options all show off their default values. You don't have to add
# them to your configuration if you're fine with the default.
docs_dir: docs/source
gens_dir: docs/_build/pydocmd     # This will end up as the MkDocs 'docs_dir'
site_dir: docs/_build/site
theme:
    name: 'material'
    palette:
        primary: 'teal'
        accent: 'amber'
    logo: 'logo.png'
    favicon: 'favicon.png'
loader:   pydocmd.loader.PythonLoader

# Whether to output headers as markdown or HTML.  Used to workaround
# https://github.com/NiklasRosenstein/pydoc-markdown/issues/11.  The default is
# to generate HTML with unique and meaningful id tags, which can't be done with
# markdown.
#
# Note: if using the simple generator mode, this will default to 'markdown'
# instead of 'html'.
headers: html

# Additional search path for your Python module. If you use Pydocmd from a
# subdirectory of your project (eg. docs/), you may want to add the parent
# directory here.
additional_search_paths:
   - ..


markdown_extensions:
  - markdown.extensions.codehilite:
      guess_lang: false
  - admonition
  - codehilite
  - extra
